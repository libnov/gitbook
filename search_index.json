{"index":{"version":"0.5.12","fields":[{"name":"title","boost":10},{"name":"keywords","boost":15},{"name":"body","boost":1}],"ref":"url","documentStore":{"store":{"./":["(l+r)/2;","){","...","//将","//递归使用","0;j","1);","1.","1]","1];","2.","3.","=",">",">=","__merge(arr,l,mid,r);","__merge(t","__mergesort(arr,0,n","__mergesort(arr,l,mid);","__mergesort(arr,mid+1,r);","__mergesort(t","arr[],","arr[],int","arr[j","arr[j]","arr[l....mid]","arr[l...r]范围进行排序","arr[mid+1","e){","e;","for(int","i=0;i","i=1;i0;j","if(arr[j","if(arr[j]","if(l","insertsort(t","int","introduct","l,int","mergesort(t","mid","mid,","n)","n){","o(n*log","o(n^2)","r){","r]","return;","selectsort(int","templat","void","}","两部分进行归并","冒泡排序","和","对","对于近乎有序的数据，性能更好，当已经是有序数组时会转换成o(n)","将一个元素插入到一个已经有序的数组里","将数组不断二分，最终将有序的数组进行合并，需要耗费o(n)的空间","希尔排序","归并排序","排序算法","插入排序","每次找最小的元素，和未排序元素交换位置","选择排序","（可以提前终止内层循环）"]},"length":1},"tokenStore":{"root":{"0":{"docs":{},";":{"docs":{},"j":{"docs":{"./":{"ref":"./","tf":0.01}}}}},"1":{"docs":{},")":{"docs":{},";":{"docs":{"./":{"ref":"./","tf":0.01}}}},".":{"docs":{"./":{"ref":"./","tf":0.01}}},"]":{"docs":{"./":{"ref":"./","tf":0.01}},";":{"docs":{"./":{"ref":"./","tf":0.01}}}}},"2":{"docs":{},".":{"docs":{"./":{"ref":"./","tf":0.01}}}},"3":{"docs":{},".":{"docs":{"./":{"ref":"./","tf":0.01}}}},"docs":{},"(":{"docs":{},"l":{"docs":{},"+":{"docs":{},"r":{"docs":{},")":{"docs":{},"/":{"2":{"docs":{},";":{"docs":{"./":{"ref":"./","tf":0.01}}}},"docs":{}}}}}}},")":{"docs":{},"{":{"docs":{"./":{"ref":"./","tf":0.02}}}},".":{"docs":{},".":{"docs":{},".":{"docs":{"./":{"ref":"./","tf":0.01}}}}},"/":{"docs":{},"/":{"docs":{},"将":{"docs":{"./":{"ref":"./","tf":0.01}}},"递":{"docs":{},"归":{"docs":{},"使":{"docs":{},"用":{"docs":{"./":{"ref":"./","tf":0.01}}}}}}}},"=":{"docs":{"./":{"ref":"./","tf":0.03}}},">":{"docs":{"./":{"ref":"./","tf":0.01}},"=":{"docs":{"./":{"ref":"./","tf":0.01}}}},"_":{"docs":{},"_":{"docs":{},"m":{"docs":{},"e":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"(":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},",":{"docs":{},"l":{"docs":{},",":{"docs":{},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{},",":{"docs":{},"r":{"docs":{},")":{"docs":{},";":{"docs":{"./":{"ref":"./","tf":0.01}}}}}}}}}}}}}}},"t":{"docs":{"./":{"ref":"./","tf":0.01}}}},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"(":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},",":{"0":{"docs":{},",":{"docs":{},"n":{"docs":{"./":{"ref":"./","tf":0.01}}}}},"docs":{},"l":{"docs":{},",":{"docs":{},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{},")":{"docs":{},";":{"docs":{"./":{"ref":"./","tf":0.01}}}}}}}}},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{},"+":{"1":{"docs":{},",":{"docs":{},"r":{"docs":{},")":{"docs":{},";":{"docs":{"./":{"ref":"./","tf":0.01}}}}}}},"docs":{}}}}}}}}},"t":{"docs":{"./":{"ref":"./","tf":0.01}}}}}}}}}}}}}}},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"[":{"docs":{},"]":{"docs":{},",":{"docs":{"./":{"ref":"./","tf":0.04}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"./":{"ref":"./","tf":0.01}}}}}}},"j":{"docs":{"./":{"ref":"./","tf":0.01}},"]":{"docs":{"./":{"ref":"./","tf":0.02}}}},"l":{"docs":{},".":{"docs":{},".":{"docs":{},".":{"docs":{},".":{"docs":{},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{},"]":{"docs":{"./":{"ref":"./","tf":0.01}}}}}}},"r":{"docs":{},"]":{"docs":{},"范":{"docs":{},"围":{"docs":{},"进":{"docs":{},"行":{"docs":{},"排":{"docs":{},"序":{"docs":{"./":{"ref":"./","tf":0.01}}}}}}}}}}}}}},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{},"+":{"1":{"docs":{"./":{"ref":"./","tf":0.01}}},"docs":{}}}}}}}}},"e":{"docs":{},")":{"docs":{},"{":{"docs":{"./":{"ref":"./","tf":0.01}}}},";":{"docs":{"./":{"ref":"./","tf":0.01}}}},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"./":{"ref":"./","tf":0.02}}}}}}}}},"i":{"docs":{},"=":{"0":{"docs":{},";":{"docs":{},"i":{"docs":{"./":{"ref":"./","tf":0.01}}}}},"1":{"docs":{},";":{"docs":{},"i":{"0":{"docs":{},";":{"docs":{},"j":{"docs":{"./":{"ref":"./","tf":0.01}}}}},"docs":{}}}},"docs":{}},"f":{"docs":{},"(":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"[":{"docs":{},"j":{"docs":{"./":{"ref":"./","tf":0.01}},"]":{"docs":{"./":{"ref":"./","tf":0.01}}}}}}}},"l":{"docs":{"./":{"ref":"./","tf":0.01}}}}},"n":{"docs":{},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"(":{"docs":{},"t":{"docs":{"./":{"ref":"./","tf":0.01}}}}}}}}}}}},"t":{"docs":{"./":{"ref":"./","tf":0.06}},"r":{"docs":{},"o":{"docs":{},"d":{"docs":{},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{"./":{"ref":"./","tf":10}}}}}}}}}}},"l":{"docs":{},",":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"./":{"ref":"./","tf":0.02}}}}}}},"m":{"docs":{},"e":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"(":{"docs":{},"t":{"docs":{"./":{"ref":"./","tf":0.01}}}}}}}}}}}},"i":{"docs":{},"d":{"docs":{"./":{"ref":"./","tf":0.01}},",":{"docs":{"./":{"ref":"./","tf":0.01}}}}}},"n":{"docs":{},")":{"docs":{"./":{"ref":"./","tf":0.01}},"{":{"docs":{"./":{"ref":"./","tf":0.03}}}}},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},"*":{"docs":{},"l":{"docs":{},"o":{"docs":{},"g":{"docs":{"./":{"ref":"./","tf":0.01}}}}}},"^":{"2":{"docs":{},")":{"docs":{"./":{"ref":"./","tf":0.02}}}},"docs":{}}}}},"r":{"docs":{},")":{"docs":{},"{":{"docs":{"./":{"ref":"./","tf":0.03}}}},"]":{"docs":{"./":{"ref":"./","tf":0.01}}},"e":{"docs":{},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{},"n":{"docs":{},";":{"docs":{"./":{"ref":"./","tf":0.01}}}}}}}}},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"./":{"ref":"./","tf":0.01}}}}}}}}}}}}}}}},"t":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"l":{"docs":{},"a":{"docs":{},"t":{"docs":{"./":{"ref":"./","tf":0.04}}}}}}}}},"v":{"docs":{},"o":{"docs":{},"i":{"docs":{},"d":{"docs":{"./":{"ref":"./","tf":0.04}}}}}},"}":{"docs":{"./":{"ref":"./","tf":0.08}}},"两":{"docs":{},"部":{"docs":{},"分":{"docs":{},"进":{"docs":{},"行":{"docs":{},"归":{"docs":{},"并":{"docs":{"./":{"ref":"./","tf":0.01}}}}}}}}},"冒":{"docs":{},"泡":{"docs":{},"排":{"docs":{},"序":{"docs":{"./":{"ref":"./","tf":0.01}}}}}},"和":{"docs":{"./":{"ref":"./","tf":0.01}}},"对":{"docs":{"./":{"ref":"./","tf":0.01}},"于":{"docs":{},"近":{"docs":{},"乎":{"docs":{},"有":{"docs":{},"序":{"docs":{},"的":{"docs":{},"数":{"docs":{},"据":{"docs":{},"，":{"docs":{},"性":{"docs":{},"能":{"docs":{},"更":{"docs":{},"好":{"docs":{},"，":{"docs":{},"当":{"docs":{},"已":{"docs":{},"经":{"docs":{},"是":{"docs":{},"有":{"docs":{},"序":{"docs":{},"数":{"docs":{},"组":{"docs":{},"时":{"docs":{},"会":{"docs":{},"转":{"docs":{},"换":{"docs":{},"成":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{"./":{"ref":"./","tf":0.01}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"将":{"docs":{},"一":{"docs":{},"个":{"docs":{},"元":{"docs":{},"素":{"docs":{},"插":{"docs":{},"入":{"docs":{},"到":{"docs":{},"一":{"docs":{},"个":{"docs":{},"已":{"docs":{},"经":{"docs":{},"有":{"docs":{},"序":{"docs":{},"的":{"docs":{},"数":{"docs":{},"组":{"docs":{},"里":{"docs":{"./":{"ref":"./","tf":0.01}}}}}}}}}}}}}}}}}}},"数":{"docs":{},"组":{"docs":{},"不":{"docs":{},"断":{"docs":{},"二":{"docs":{},"分":{"docs":{},"，":{"docs":{},"最":{"docs":{},"终":{"docs":{},"将":{"docs":{},"有":{"docs":{},"序":{"docs":{},"的":{"docs":{},"数":{"docs":{},"组":{"docs":{},"进":{"docs":{},"行":{"docs":{},"合":{"docs":{},"并":{"docs":{},"，":{"docs":{},"需":{"docs":{},"要":{"docs":{},"耗":{"docs":{},"费":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},"的":{"docs":{},"空":{"docs":{},"间":{"docs":{"./":{"ref":"./","tf":0.01}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"希":{"docs":{},"尔":{"docs":{},"排":{"docs":{},"序":{"docs":{"./":{"ref":"./","tf":0.01}}}}}},"归":{"docs":{},"并":{"docs":{},"排":{"docs":{},"序":{"docs":{"./":{"ref":"./","tf":0.02}}}}}},"排":{"docs":{},"序":{"docs":{},"算":{"docs":{},"法":{"docs":{"./":{"ref":"./","tf":0.01}}}}}},"插":{"docs":{},"入":{"docs":{},"排":{"docs":{},"序":{"docs":{"./":{"ref":"./","tf":0.01}}}}}},"每":{"docs":{},"次":{"docs":{},"找":{"docs":{},"最":{"docs":{},"小":{"docs":{},"的":{"docs":{},"元":{"docs":{},"素":{"docs":{},"，":{"docs":{},"和":{"docs":{},"未":{"docs":{},"排":{"docs":{},"序":{"docs":{},"元":{"docs":{},"素":{"docs":{},"交":{"docs":{},"换":{"docs":{},"位":{"docs":{},"置":{"docs":{"./":{"ref":"./","tf":0.01}}}}}}}}}}}}}}}}}}}}},"选":{"docs":{},"择":{"docs":{},"排":{"docs":{},"序":{"docs":{"./":{"ref":"./","tf":0.01}}}}}},"（":{"docs":{},"可":{"docs":{},"以":{"docs":{},"提":{"docs":{},"前":{"docs":{},"终":{"docs":{},"止":{"docs":{},"内":{"docs":{},"层":{"docs":{},"循":{"docs":{},"环":{"docs":{},"）":{"docs":{"./":{"ref":"./","tf":0.01}}}}}}}}}}}}}}},"length":68},"corpusTokens":["(l+r)/2;","){","...","//将","//递归使用","0;j","1);","1.","1]","1];","2.","3.","=",">",">=","__merge(arr,l,mid,r);","__merge(t","__mergesort(arr,0,n","__mergesort(arr,l,mid);","__mergesort(arr,mid+1,r);","__mergesort(t","arr[],","arr[],int","arr[j","arr[j]","arr[l....mid]","arr[l...r]范围进行排序","arr[mid+1","e){","e;","for(int","i=0;i","i=1;i0;j","if(arr[j","if(arr[j]","if(l","insertsort(t","int","introduct","l,int","mergesort(t","mid","mid,","n)","n){","o(n*log","o(n^2)","r){","r]","return;","selectsort(int","templat","void","}","两部分进行归并","冒泡排序","和","对","对于近乎有序的数据，性能更好，当已经是有序数组时会转换成o(n)","将一个元素插入到一个已经有序的数组里","将数组不断二分，最终将有序的数组进行合并，需要耗费o(n)的空间","希尔排序","归并排序","排序算法","插入排序","每次找最小的元素，和未排序元素交换位置","选择排序","（可以提前终止内层循环）"],"pipeline":["stopWordFilter","stemmer"]},"store":{"./":{"url":"./","title":"Introduction","keywords":"","body":"排序算法\n1. 选择排序 O(n^2)\n每次找最小的元素，和未排序元素交换位置\nvoid selectSort(int arr[], int n){\n  for(int i=0;i\n2. 插入排序 O(n^2)\n将一个元素插入到一个已经有序的数组里 （可以提前终止内层循环）\n对于近乎有序的数据，性能更好，当已经是有序数组时会转换成O(n)\ntemplate\nvoid insertSort(T arr[], int n){\n  for(int i=1;i0;j--){\n      if(arr[j] 0;j--){\n      if(arr[j-1] > e){\n        arr[j] = arr[j-1];\n      }\n    }\n    arr[j] = e;\n  }\n}\n\n冒泡排序\n希尔排序\n3. 归并排序 O(n*log n)\n将数组不断二分，最终将有序的数组进行合并，需要耗费O(n)的空间\ntemplate\nvoid mergeSort(T arr[], int n){\n\n  __mergeSort(arr,0,n-1);\n}\n\n//递归使用 归并排序 对 arr[l...r]范围进行排序\ntemplate\n__mergeSort(T arr[], int l,int r){\n  if(l >= r){\n    return;\n  }\n\n  int mid = (l+r)/2;\n  __mergeSort(arr,l,mid);\n  __mergeSort(arr,mid+1,r);\n\n  __merge(arr,l,mid,r);\n}\n\n//将 arr[l....mid] 和 arr[mid+1 ... r] 两部分进行归并\ntemplate\nvoid __merge(T arr[],int l,int mid, int r){\n\n\n}\n\n"}}}